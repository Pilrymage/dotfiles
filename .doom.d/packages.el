;; -*- no-byte-compile: t; -*-;;; $DOOMDIR/packages.el;; To install a package with Doom you must declare them here and run 'doom sync';; on the command line, then restart Emacs for the changes to take effect -- or;; use 'M-x doom/reload'.;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:;(package! some-package)(package! org :pin "ca873f7")(package! copilot  :recipe (:host github :repo "zerolfx/copilot.el" :files ("*.el" "dist")))(package! rime  :recipe (:host github :repo "DogLooksGood/emacs-rime" :files ("*.el" "Makefile" "lib.c")))(package! oj  :recipe (:host github :repo "conao3/oj.el" :files ("*.el")))(package! kbd-mode  :recipe (:host github           :repo "kmonad/kbd-mode"))(package! dashboard)(package! flycheck-aspell)(package! calfw)(package! tldr);; (package! beacon)(package! wc-mode)(package! clippy)(package! dirvish)(package! emacsql-sqlite)(package! paredit)(package! evil-paredit  :recipe (:host github           :repo "roman/evil-paredit"           :files ("*.el")))(package! kbd-mode  :recipe (:host github           :repo "kmonad/kbd-mode"));; (unpin! org-roam)(package! org-roam-ui)(package! org-ref)(package! good-scroll);; (package! alert ; 可惜不支持中文;;   :recipe (:host github :repo "jwiegley/alert"))(package! grip-mode)(package! ox-gfm  :recipe (:host github           :repo "larstvei/ox-gfm"           :files ("*.el")))(package! helm-bibtex)(package! cnfonts)(package! org-roam-bibtex  :recipe (:host github :repo "org-roam/org-roam-bibtex"));; When using bibtex-completion via the `biblio` module(unpin! bibtex-completion helm-bibtex ivy-bibtex)(package! hackernews)(package! telega)(package! citar-org-roam)(package! sage-shell-mode)(package! ob-sagemath)(package! ob-powershell  :recipe (:host github :repo "rkiggen/ob-powershell"))(package! oz  :recipe (:host github :repo "mozart/mozart2" :files ("opi/emacs/oz.el")))(package! bison-mode  :recipe (:host github :repo "Wilfred/bison-mode" :files ("*.el")))(package! flex-mode  :recipe (:host github :repo "manateelazycat/flex" :files ("*.el")))(package! emt  :recipe (:host github :repo "roife/emt"                   :files ("*.el" "module/*" "module")))(package! j-mode  :recipe (:host github :repo "LdBeth/j-mode" :files ("*.el")))(package! anki-editor)(package! emacsql);; When using org-roam via the `+roam` flag;; When using bibtex-completion via the `biblio` module;; To install a package directly from a remote git repo, you must specify a;; `:recipe'. You'll find documentation on what `:recipe' accepts here:;; https://github.com/radian-software/straight.el#the-recipe-format;(package! another-package;  :recipe (:host github :repo "username/repo"));; If the package you are trying to install does not contain a PACKAGENAME.el;; file, or is located in a subdirectory of the repo, you'll need to specify;; `:files' in the `:recipe':;(package! this-package;  :recipe (:host github :repo "username/repo";           :files ("some-file.el" "src/lisp/*.el")));; If you'd like to disable a package included with Doom, you can do so here;; with the `:disable' property:;(package! builtin-package :disable t)(package! ispell :disable t);; You can override the recipe of a built in package without having to specify;; all the properties for `:recipe'. These will inherit the rest of its recipe;; from Doom or MELPA/ELPA/Emacsmirror:;(package! builtin-package :recipe (:nonrecursive t));(package! builtin-package-2 :recipe (:repo "myfork/package"));; Specify a `:branch' to install a package from a particular branch or tag.;; This is required for some packages whose default branch isn't 'master' (which;; our package manager can't deal with; see radian-software/straight.el#279);(package! builtin-package :recipe (:branch "develop"));; Use `:pin' to specify a particular commit to install.;(package! builtin-package :pin "1a2b3c4d5e");; Doom's packages are pinned to a specific commit and updated from release to;; release. The `unpin!' macro allows you to unpin single packages...;(unpin! pinned-package);; ...or multiple packages;(unpin! pinned-package another-pinned-package);; ...Or *all* packages (NOT RECOMMENDED; will likely break things);(unpin! t)